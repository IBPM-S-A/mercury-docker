apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-db
  namespace: {{ .Release.Namespace }}
  labels:
    app: postgresql
    io.kompose.name: mercury-single-node
    io.kompose.service: postgres-db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres-db
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: postgres-db
    spec:
      hostname: postgres-db
      imagePullSecrets:
        - name: "{{ .Values.image.pullSecret }}"
      containers:
        - name: postgres-db
          image: "{{ .Values.image.registry }}postgres:{{ .Values.image.mainTag }}"
          env:
            - name: HGDB_USER_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: mercury-hgdb #Read from a configmap called oradb
                  key: HGDB_USER_PASSWORD #Read the key 
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: mercury-hgdb #Read from a configmap called oradb
                  key: POSTGRES_PASSWORD #Read the key 
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - name: mercurysinglenode-postgres-db
              mountPath: /var/lib/postgresql/data
      restartPolicy: Always
      volumes:
        - name: mercurysinglenode-postgres-db
          persistentVolumeClaim:
            claimName: mercurysinglenode-postgres-db
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-db
  namespace: {{ .Release.Namespace }}
  labels:
    app: postgresql
    io.kompose.name: mercury-single-node
    io.kompose.service: postgres-db
spec:
  selector:
    io.kompose.service: postgres-db
  ports:
  - name: "database-port"
    port: 5432
    protocol: TCP
    targetPort: 5432
  type: NodePort
status:
  loadBalancer: {}
